<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.0.xsd">

        <!-- pure apsect -->

    <aop:aspectj-autoproxy/>

    <!--<bean class="org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator" />-->

    <bean id="owlsAnnotationAuthorizingAspect"
          class="com.manymonkeys.security.shiro.aspectj.OwlsAnnotationAuthorizingAspect">
    </bean>
    <bean id="owlsAnnotationArgumentsAspect"
          class="com.manymonkeys.security.shiro.aspectj.OwlsAnnotationArgumentsAspect">
        <!--factory-method="aspectOf"-->
    </bean>

    <!-- Turn on AspectJ @Configurable support -->
    <context:spring-configured/>
    <context:component-scan base-package="com.manymonkeys.app"/>

    <!-- Turn on @Autowired, @PostConstruct etc support -->
    <bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"/>
    <bean class="org.springframework.context.annotation.CommonAnnotationBeanPostProcessor"/>

    <!-- ============== -->
    <!-- Database beans -->
    <!-- ============== -->

    <!-- Cassandra -->

    <bean id="cassandraHostConfigurator" class="me.prettyprint.cassandra.service.CassandraHostConfigurator">
        <constructor-arg value="home.chebotaev.ru:9160"/>
    </bean>
    <bean id="cluster" class="me.prettyprint.cassandra.service.ThriftCluster">
        <constructor-arg value="Test Cluster"/>
        <constructor-arg ref="cassandraHostConfigurator"/>
    </bean>
    <bean id="keyspace" class="me.prettyprint.hector.api.factory.HFactory" factory-method="createKeyspace">
        <constructor-arg value="InformationItems"/>
        <constructor-arg ref="cluster"/>
    </bean>


    <!-- ======== -->
    <!-- ii beans -->
    <!-- ======== -->
    <bean id="iiRecommender" class="com.manymonkeys.core.algo.impl.RecommenderPlainImpl">
        <property name="componentsLimit" value="75"/>
        <property name="parentsLimit" value="100"/>
        <property name="weightThreshold" value="2.1"/>
    </bean>

    <bean id="userService" class="com.manymonkeys.service.auth.UserService">
        <constructor-arg ref="keyspace"/>
    </bean>

    <!-- Shiro -->

    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <!-- override these for application-specific URLs if you like:
        <property name="loginUrl" value="/login.jsp"/>
        <property name="successUrl" value="/home.jsp"/>
        <property name="unauthorizedUrl" value="/unauthorized.jsp"/> -->
        <!-- The 'filters' property is not necessary since any declared javax.servlet.Filter bean  -->
        <!-- defined will be automatically acquired and available via its beanName in chain        -->
        <!-- definitions, but you can perform instance overrides or name aliases here if you like: -->
        <!-- <property name="filters">
            <util:map>
                <entry key="anAlias" value-ref="someFilter"/>
            </util:map>
        </property> -->
        <property name="filterChainDefinitions">
            <value>
                # some example chain definitions:
                #/admin/** = authc, roles[admin]
                #/docs/** = authc, perms[document:read]
                #/** = authc
                # more URL-to-FilterChain definitions here
            </value>
        </property>
    </bean>

    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!--Single realm app.  If you have multiple realms, use the 'realms' property instead.-->
        <property name="realm" ref="myRealm"/>
        <!--By default the servlet container sessions will be used.  Uncomment this line-->
        <!--to use shiro's native sessions (see the JavaDoc for more):-->
        <property name="sessionMode" value="native"/>
    </bean>
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!-- Define the Shiro Realm implementation you want to use to connect to your back-end -->
    <!-- security datasource: -->
    <bean id="myRealm" class="org.apache.shiro.realm.text.IniRealm">
        <property name="resourcePath" value="classpath:shiroAnnotatedServiceTest.ini"/>
    </bean>


    <!-- Shiro Annotations -->
    <!-- Enable Shiro Annotations for Spring-configured beans.  Only run after -->
    <!-- the lifecycleBeanProcessor has run: -->
    <!--
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor"/>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>
    -->

</beans>